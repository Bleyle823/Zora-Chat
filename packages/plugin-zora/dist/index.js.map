{"version":3,"sources":["../src/index.ts","../src/provider.ts","../src/actions.ts"],"sourcesContent":["import type { Plugin } from \"@elizaos/core\";\nimport { walletProvider, getWalletClient } from \"./provider\";\nimport { getZoraActions } from \"./actions\";\n\n// Initial banner\nconsole.log(\"\\n┌════════════════════════════════════════┐\");\nconsole.log(\"│          ZORA PLUGIN                   │\");\nconsole.log(\"├────────────────────────────────────────┤\");\nconsole.log(\"│  Initializing Zora Plugin...           │\");\nconsole.log(\"│  Version: 1.0.0                        │\");\nconsole.log(\"└════════════════════════════════════════┘\");\n\nconst initializeActions = async () => {\n    try {\n        // Check if we have the required environment variables\n        const privateKey = process.env.ZORA_PRIVATE_KEY;\n        const rpcUrl = process.env.ZORA_RPC_URL || \"https://sepolia.base.org\";\n\n        if (!privateKey) {\n            console.warn(\"⚠️ Missing ZORA_PRIVATE_KEY - Zora actions will not be available\");\n            return [];\n        }\n\n        const actions = await getZoraActions({\n            getWalletClient,\n        });\n        \n        console.log(\"✔ Zora actions initialized successfully.\");\n        console.log(`✔ Available actions: ${actions.map(a => a.name).join(\", \")}`);\n        \n        return actions;\n    } catch (error) {\n        console.error(\"❌ Failed to initialize Zora actions:\", error);\n        return []; // Return empty array instead of failing\n    }\n};\n\nexport const createZoraPlugin = async (): Promise<Plugin> => {\n    const actions = await initializeActions();\n    \n    return {\n        name: \"[Zora] Integration\",\n        description: \"Zora protocol integration plugin for creating and trading coins\",\n        providers: [walletProvider],\n        evaluators: [],\n        services: [],\n        actions,\n    };\n};\n\n// For backward compatibility, export a default plugin with empty actions\nexport const zoraPlugin: Plugin = {\n    name: \"[Zora] Integration\",\n    description: \"Zora protocol integration plugin for creating and trading coins\",\n    providers: [walletProvider],\n    evaluators: [],\n    services: [],\n    actions: [], // Empty actions for synchronous export\n};\n\nexport default zoraPlugin;","import type { Provider, IAgentRuntime } from \"@elizaos/core\";\nimport { createWalletClient, createPublicClient, http } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { baseSepolia } from \"viem/chains\";\nimport * as fs from \"node:fs\";\n\nconst WALLET_DATA_FILE = \"zora_wallet_data.json\";\n\ninterface WalletData {\n    address: string;\n    privateKey: string;\n    network: string;\n}\n\nexport async function getWalletClient() {\n    const privateKey = process.env.ZORA_PRIVATE_KEY;\n    const rpcUrl = process.env.ZORA_RPC_URL || \"https://sepolia.base.org\";\n\n    if (!privateKey) {\n        throw new Error(\"Missing ZORA_PRIVATE_KEY environment variable\");\n    }\n\n    // Create account from private key\n    const account = privateKeyToAccount(privateKey as `0x${string}`);\n\n    // Create wallet client\n    const walletClient = createWalletClient({\n        account,\n        chain: baseSepolia,\n        transport: http(rpcUrl),\n    });\n\n    // Create public client\n    const publicClient = createPublicClient({\n        chain: baseSepolia,\n        transport: http(rpcUrl),\n    });\n\n    // Save wallet data for reference\n    const walletData: WalletData = {\n        address: account.address,\n        privateKey: privateKey,\n        network: \"base-sepolia\"\n    };\n\n    try {\n        fs.writeFileSync(WALLET_DATA_FILE, JSON.stringify(walletData, null, 2));\n    } catch (error) {\n        console.warn(\"Warning: Could not save wallet data:\", error);\n    }\n\n    return { walletClient, publicClient, account };\n}\n\nexport const walletProvider: Provider = {\n    async get(_runtime: IAgentRuntime): Promise<string | null> {\n        try {\n            const { account } = await getWalletClient();\n            return `Zora Wallet Address: ${account.address} (Base Sepolia)`;\n        } catch (error) {\n            console.error(\"Error in Zora wallet provider:\", error);\n            return `Error initializing Zora wallet: ${error.message}`;\n        }\n    },\n};","import {\n    type Action,\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport { createCoin, tradeCoin } from \"@zoralabs/coins-sdk\";\nimport { parseEther, type Address } from \"viem\";\nimport { z } from \"zod\";\n\ntype GetZoraActionsParams = {\n    getWalletClient: () => Promise<{\n        walletClient: any;\n        publicClient: any;\n        account: any;\n    }>;\n};\n\n// Schema for creating a coin\nconst createCoinSchema = z.object({\n    name: z.string().describe(\"The name of the coin to create\"),\n    symbol: z.string().describe(\"The symbol/ticker of the coin\"),\n    payoutRecipient: z.string().optional().describe(\"The address to receive payouts (optional)\"),\n    uri: z.string().optional().describe(\"The metadata URI for the coin (optional)\"),\n});\n\n// Schema for trading a coin\nconst tradeCoinSchema = z.object({\n    coinAddress: z.string().describe(\"The contract address of the coin to trade\"),\n    direction: z.enum([\"buy\", \"sell\"]).describe(\"Whether to buy or sell the coin\"),\n    amount: z.string().describe(\"The amount to trade (in ETH for buy, in tokens for sell)\"),\n    recipient: z.string().optional().describe(\"The recipient address (optional, defaults to sender)\"),\n    minAmountOut: z.string().optional().describe(\"Minimum amount to receive (optional)\"),\n});\n\nexport async function getZoraActions({\n    getWalletClient,\n}: GetZoraActionsParams): Promise<Action[]> {\n    const createCoinAction: Action = {\n        name: \"CREATE_ZORA_COIN\",\n        description: \"Create a new coin on the Zora protocol\",\n        similes: [\"CREATE_COIN\", \"DEPLOY_TOKEN\", \"MINT_COIN\", \"LAUNCH_TOKEN\"],\n        validate: async () => true,\n        handler: async (\n            runtime: IAgentRuntime,\n            message: Memory,\n            state: State | undefined,\n            _options?: Record<string, unknown>,\n            callback?: HandlerCallback\n        ): Promise<boolean> => {\n            try {\n                const { walletClient, publicClient, account } = await getWalletClient();\n                \n                let currentState = state ?? (await runtime.composeState(message));\n                currentState = await runtime.updateRecentMessageState(currentState);\n\n                const parameterContext = composeContext({\n                    state: currentState,\n                    template: `{{recentMessages}}\n\nGiven the recent messages, extract the following information for creating a Zora coin:\n- name: The name of the coin\n- symbol: The symbol/ticker of the coin\n- payoutRecipient: The address to receive payouts (optional)\n- uri: The metadata URI for the coin (optional)\n\nExtract these parameters from the conversation context.`\n                });\n\n                const { object: parameters } = await generateObject({\n                    runtime,\n                    context: parameterContext,\n                    modelClass: ModelClass.LARGE,\n                    schema: createCoinSchema,\n                });\n\n                const coinParams = {\n                    name: parameters.name,\n                    symbol: parameters.symbol,\n                    uri: parameters.uri || \"ipfs://bafybeigoxzqzbnxsn35vq7lls3ljxdcwjafxvbvkivprsodzrptpiguysy\",\n                    payoutRecipient: (parameters.payoutRecipient || account.address) as Address,\n                };\n\n                console.log(\"Creating coin with parameters:\", coinParams);\n\n                const result = await createCoin(\n                    coinParams,\n                    walletClient,\n                    publicClient,\n                    { gasMultiplier: 120 }\n                );\n\n                const responseContext = composeContext({\n                    state: currentState,\n                    template: `\n# Action Examples\n{{actionExamples}}\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs.\n\nThe CREATE_ZORA_COIN action was executed successfully.\nCoin \"${coinParams.name}\" (${coinParams.symbol}) has been created!\n\nTransaction Hash: ${result.hash}\nContract Address: ${result.address}\n\n{{actions}}\n\nRespond to the message knowing that the coin creation was successful:\n{{recentMessages}}\n`\n                });\n\n                const response = await generateText({\n                    runtime,\n                    context: responseContext,\n                    modelClass: ModelClass.LARGE,\n                });\n\n                callback?.({\n                    text: response,\n                    content: {\n                        success: true,\n                        coinAddress: result.address,\n                        txHash: result.hash,\n                        name: coinParams.name,\n                        symbol: coinParams.symbol,\n                    },\n                });\n\n                return true;\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : String(error);\n                callback?.({\n                    text: `Error creating Zora coin: ${errorMessage}`,\n                    content: { error: errorMessage },\n                });\n                return false;\n            }\n        },\n        examples: [\n            [\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Create a coin called 'ElizaCoin' with symbol 'ELIZA'\",\n                    },\n                },\n                {\n                    user: \"{{agent}}\",\n                    content: {\n                        text: \"I'll create the ElizaCoin (ELIZA) for you on the Zora protocol!\",\n                        action: \"CREATE_ZORA_COIN\",\n                    },\n                },\n            ],\n        ],\n    };\n\n    const tradeCoinAction: Action = {\n        name: \"TRADE_ZORA_COIN\",\n        description: \"Buy or sell a coin on the Zora protocol\",\n        similes: [\"BUY_COIN\", \"SELL_COIN\", \"TRADE_TOKEN\", \"SWAP_COIN\"],\n        validate: async () => true,\n        handler: async (\n            runtime: IAgentRuntime,\n            message: Memory,\n            state: State | undefined,\n            _options?: Record<string, unknown>,\n            callback?: HandlerCallback\n        ): Promise<boolean> => {\n            try {\n                const { walletClient, publicClient, account } = await getWalletClient();\n                \n                let currentState = state ?? (await runtime.composeState(message));\n                currentState = await runtime.updateRecentMessageState(currentState);\n\n                const parameterContext = composeContext({\n                    state: currentState,\n                    template: `{{recentMessages}}\n\nGiven the recent messages, extract the following information for trading a Zora coin:\n- coinAddress: The contract address of the coin to trade\n- direction: Whether to \"buy\" or \"sell\" the coin\n- amount: The amount to trade (in ETH for buy, in tokens for sell)\n- recipient: The recipient address (optional)\n- minAmountOut: Minimum amount to receive (optional)\n\nExtract these parameters from the conversation context.`\n                });\n\n                const { object: parameters } = await generateObject({\n                    runtime,\n                    context: parameterContext,\n                    modelClass: ModelClass.LARGE,\n                    schema: tradeCoinSchema,\n                });\n\n                const tradeParams = {\n                    direction: parameters.direction,\n                    target: parameters.coinAddress as Address,\n                    args: {\n                        recipient: (parameters.recipient || account.address) as Address,\n                        orderSize: parseEther(parameters.amount),\n                        minAmountOut: parameters.minAmountOut ? parseEther(parameters.minAmountOut) : 0n,\n                        tradeReferrer: account.address as Address,\n                    }\n                };\n\n                console.log(\"Trading coin with parameters:\", tradeParams);\n\n                const result = await tradeCoin(\n                    tradeParams,\n                    walletClient,\n                    publicClient,\n                    { gasMultiplier: 120 }\n                );\n\n                const responseContext = composeContext({\n                    state: currentState,\n                    template: `\n# Action Examples\n{{actionExamples}}\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs.\n\nThe TRADE_ZORA_COIN action was executed successfully.\n${parameters.direction === \"buy\" ? \"Bought\" : \"Sold\"} ${parameters.amount} ${parameters.direction === \"buy\" ? \"ETH worth of\" : \"tokens from\"} coin at ${parameters.coinAddress}\n\nTransaction Hash: ${result.hash}\n\n{{actions}}\n\nRespond to the message knowing that the coin trade was successful:\n{{recentMessages}}\n`\n                });\n\n                const response = await generateText({\n                    runtime,\n                    context: responseContext,\n                    modelClass: ModelClass.LARGE,\n                });\n\n                callback?.({\n                    text: response,\n                    content: {\n                        success: true,\n                        txHash: result.hash,\n                        direction: parameters.direction,\n                        amount: parameters.amount,\n                        coinAddress: parameters.coinAddress,\n                    },\n                });\n\n                return true;\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : String(error);\n                callback?.({\n                    text: `Error trading Zora coin: ${errorMessage}`,\n                    content: { error: errorMessage },\n                });\n                return false;\n            }\n        },\n        examples: [\n            [\n                {\n                    user: \"{{user1}}\",\n                    content: {\n                        text: \"Buy 0.1 ETH worth of the coin at 0x123...\",\n                    },\n                },\n                {\n                    user: \"{{agent}}\",\n                    content: {\n                        text: \"I'll buy 0.1 ETH worth of that coin for you!\",\n                        action: \"TRADE_ZORA_COIN\",\n                    },\n                },\n            ],\n        ],\n    };\n\n    return [createCoinAction, tradeCoinAction];\n}"],"mappings":"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","names":["import_viem","getWalletClient"]}